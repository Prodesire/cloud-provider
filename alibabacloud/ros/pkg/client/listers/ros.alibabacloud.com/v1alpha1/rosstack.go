/*

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/oam-dev/cloud-provider/alibabacloud/ros/apis/ros.alibabacloud.com/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RosStackLister helps list RosStacks.
type RosStackLister interface {
	// List lists all RosStacks in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.RosStack, err error)
	// RosStacks returns an object that can list and get RosStacks.
	RosStacks(namespace string) RosStackNamespaceLister
	RosStackListerExpansion
}

// rosStackLister implements the RosStackLister interface.
type rosStackLister struct {
	indexer cache.Indexer
}

// NewRosStackLister returns a new RosStackLister.
func NewRosStackLister(indexer cache.Indexer) RosStackLister {
	return &rosStackLister{indexer: indexer}
}

// List lists all RosStacks in the indexer.
func (s *rosStackLister) List(selector labels.Selector) (ret []*v1alpha1.RosStack, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RosStack))
	})
	return ret, err
}

// RosStacks returns an object that can list and get RosStacks.
func (s *rosStackLister) RosStacks(namespace string) RosStackNamespaceLister {
	return rosStackNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RosStackNamespaceLister helps list and get RosStacks.
type RosStackNamespaceLister interface {
	// List lists all RosStacks in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.RosStack, err error)
	// Get retrieves the RosStack from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.RosStack, error)
	RosStackNamespaceListerExpansion
}

// rosStackNamespaceLister implements the RosStackNamespaceLister
// interface.
type rosStackNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RosStacks in the indexer for a given namespace.
func (s rosStackNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RosStack, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RosStack))
	})
	return ret, err
}

// Get retrieves the RosStack from the indexer for a given namespace and name.
func (s rosStackNamespaceLister) Get(name string) (*v1alpha1.RosStack, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("rosstack"), name)
	}
	return obj.(*v1alpha1.RosStack), nil
}
